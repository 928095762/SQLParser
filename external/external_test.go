package external

import (
	"fmt"
	"testing"
)

func Test_GetJsonParser(t *testing.T) {
	result := GetJsonParser("clickhouse", "CREATE TABLE IF NOT EXISTS realtime.f_order_sa_troubleshoot_hourly_local  (\n                                                                              network_id Int64 DEFAULT -1,\n                                                                              `inbound_order_id` Int64 DEFAULT -1,\n                                                                              `outbound_order_id` Int64 DEFAULT -1,\n                                                                              `standard_brand_id` Int64 DEFAULT -1,\n                                                                              `standard_brand_visibility` LowCardinality(String) DEFAULT 'FULL_VISIBILITY',\n    `standard_device_type_id` Int64 DEFAULT -1,\n    `standard_device_visibility` LowCardinality(String) DEFAULT 'FULL_VISIBILITY',\n    `standard_programmer_id` Int64 DEFAULT -1,\n    `standard_programmer_visibility` LowCardinality(String) DEFAULT 'FULL_VISIBILITY',\n    `user_dma_code` Int64 DEFAULT -1,\n    `geo_dma_visibility` LowCardinality(String) DEFAULT 'FULL_VISIBILITY',\n    `standard_endpoint_owner_id` Int64 DEFAULT -1,\n    `standard_endpoint_owner_visibility` LowCardinality(String) DEFAULT 'FULL_VISIBILITY',\n    `standard_endpoint_id` Int64 DEFAULT -1,\n    `standard_endpoint_visibility` LowCardinality(String) DEFAULT 'FULL_VISIBILITY',\n    `order_error_id` Int64 DEFAULT -1,\n    `ad_error_category_id` Int64 DEFAULT -1,\n    `ad_error_id` Int64 DEFAULT -1,\n    `user_agent_visibility` LowCardinality(String) DEFAULT 'FULL_VISIBILITY',\n    `candidate_orders` Int64 DEFAULT 0,\n    `selected_orders` Int64 DEFAULT 0,\n    `filtered_orders` Int64 DEFAULT 0,\n    `opportunity` Int64 DEFAULT 0,\n    `candidated_ads` Int64 DEFAULT 0,\n    `selected_primary_ads` Int64 DEFAULT 0,\n    `distinct_selected_primary_ads` Int64 DEFAULT 0,\n    `filtered_ads` Int64 DEFAULT 0,\n    `error_category_ads` Int64 DEFAULT 0,\n    `error_ads` Int64 DEFAULT 0,\n    `event_date` DateTime\n    )\n    ENGINE = SummingMergeTree\n    PARTITION BY toStartOfHour(event_date)\n    PRIMARY KEY (network_id, event_date, inb);", )

	fmt.Println(result)
}


func Test_GetParser(t *testing.T) {
	result := GetParser("clickhouse", "CREATE TABLE IF NOT EXISTS realtime.f_order_sa_troubleshoot_hourly_local  (\n                                                                              network_id Int64 DEFAULT -1,\n                                                                              `inbound_order_id` Int64 DEFAULT -1,\n                                                                              `outbound_order_id` Int64 DEFAULT -1,\n                                                                              `standard_brand_id` Int64 DEFAULT -1,\n                                                                              `standard_brand_visibility` LowCardinality(String) DEFAULT 'FULL_VISIBILITY',\n    `standard_device_type_id` Int64 DEFAULT -1,\n    `standard_device_visibility` LowCardinality(String) DEFAULT 'FULL_VISIBILITY',\n    `standard_programmer_id` Int64 DEFAULT -1,\n    `standard_programmer_visibility` LowCardinality(String) DEFAULT 'FULL_VISIBILITY',\n    `user_dma_code` Int64 DEFAULT -1,\n    `geo_dma_visibility` LowCardinality(String) DEFAULT 'FULL_VISIBILITY',\n    `standard_endpoint_owner_id` Int64 DEFAULT -1,\n    `standard_endpoint_owner_visibility` LowCardinality(String) DEFAULT 'FULL_VISIBILITY',\n    `standard_endpoint_id` Int64 DEFAULT -1,\n    `standard_endpoint_visibility` LowCardinality(String) DEFAULT 'FULL_VISIBILITY',\n    `order_error_id` Int64 DEFAULT -1,\n    `ad_error_category_id` Int64 DEFAULT -1,\n    `ad_error_id` Int64 DEFAULT -1,\n    `user_agent_visibility` LowCardinality(String) DEFAULT 'FULL_VISIBILITY',\n    `candidate_orders` Int64 DEFAULT 0,\n    `selected_orders` Int64 DEFAULT 0,\n    `filtered_orders` Int64 DEFAULT 0,\n    `opportunity` Int64 DEFAULT 0,\n    `candidated_ads` Int64 DEFAULT 0,\n    `selected_primary_ads` Int64 DEFAULT 0,\n    `distinct_selected_primary_ads` Int64 DEFAULT 0,\n    `filtered_ads` Int64 DEFAULT 0,\n    `error_category_ads` Int64 DEFAULT 0,\n    `error_ads` Int64 DEFAULT 0,\n    `event_date` DateTime\n    )\n    ENGINE = SummingMergeTree\n    PARTITION BY toStartOfHour(event_date)\n    PRIMARY KEY (network_id, event_date, inb);", )

	fmt.Println(result)
}

