package output

import (
	"AntlrTest2/clickhouse_parser"
	"fmt"
	"github.com/antlr/antlr4/runtime/Go/antlr"
)

func main123(){
	//str := "INSERT INTO aggregate.f_market_outbound_auction_hourly (network_id, asset_id, series_id, site_id, site_section_id, country_id, time_position_class, device_type,  dsp_id, buyer_group_id, buyer_ids, integration_type, error_code, outbound_request, outbound_request_user_matched, outbound_opportunity, imp_no_bids, event_date, auction_status) VALUES\n(171213, 1, 1, 1, 1, 1, 'preroll', 'PHONE', 1, 1, [1], 'NORMAL', '', 10000,10000,10000,0, toDateTime('2018-06-01 11:00:00'), 6),\n(171213, 1, 1, 1, 1, 1, 'midroll', 'PHONE', 1, 1, [1], 'PG_TD', '', 10000,10000,10000,0, toDateTime('2018-06-01 12:00:00'), 6),\n(171213, 2, 2, 2, 2, 2, 'preroll', 'PHONE', 2, 2, [2], 'NORMAL', '', 10000, 10000, 10000,0, toDateTime('2018-06-02 11:00:00'), 6),\n(171213, 2, 2, 2, 2, 2, 'midroll', 'PHONE', 2, 2, [2], 'PG_TD', '', 10000, 10000, 10000,0, toDateTime('2018-06-02 12:00:00'), 6),\n(171213, 3, 3, 3, 3, 3, 'preroll', 'PHONE', 3, 3, [3], 'NORMAL', '', 5000, 5000, 5000,0, toDateTime('2018-06-03 11:00:00'), 6),\n(171213, 3, 3, 3, 3, 3, 'midroll', 'PHONE', 3, 3, [3], 'PG_TD', '', 5000, 5000, 5000,0, toDateTime('2018-06-03 12:00:00'), 6);"
	//str := "SELECT * FROM tablename where id = 1;"
	//str := "alter table aggregate.f_market_selected_hourly update asset_id = 10 where site_id  = 2;"
	str := "select network.networkId                                                      as network_id\n     , network.contentOwnerNetworkId                                          as content_owner_id\n     , network.distributorNetworkId                                           as distributor_id\n     , network.resellerNetworkId                                              as reseller_id\n     , network.role                                                           as transaction_type\n     , ack.eventTrafficType                                                   as traffic_type\n     , IF(network.networkIsAdOwner, placementId, -1)                          as placement_id\n     , IF(network.networkIsAdOwner, adId, -1)                                 as ad_id\n     , creativeId                                                             as creative_id\n     , ack.creativeRenditionId                                                as rendition_id\n     , IF(network.networkIsExtraItemOwner, adUnitId, -1)                      as ad_unit_id\n     , CASE\n         WHEN adIsBumperAd and isOwnedByRootCRO THEN 'BUMPER'\n         WHEN adIsExternal and network.networkIsAdOwner THEN 'EXTERNAL_AD'\n         WHEN ack.isEmbeddedTrackingAdEvent and network.networkIsAdOwner THEN 'TRACKING_AD'\n         WHEN ack.isTrackingURLEvent and network.networkIsAdOwner THEN 'TRACKING_URL'\n         ELSE 'NORMAL'\n       END                                                                    as ad_type\n     , adSlot.timePositionClass                                               as time_position_class\n     , network.ruleId                                                         as outbound_mrm_rule_id\n     , network.inboundRuleId                                                  as inbound_mrm_rule_id\n     , network.bitFlags + adBitFlags + requestBitFlags                        as bit_flag\n     , sum(ack.adView)                                                        as ad_views\n     , sum(ack.click)                                                         as clicks\n     , sum(IF(network.networkIsAdOwner, ack.noAdView, 0))                     as no_ad_views\n     , sum(ROUND(network.revenue * ack.fireEventRevenueRatio, 5))             as revenue\n     , sum(ROUND(network.resellerRevenue * ack.fireEventRevenueRatio, 5))     as reseller_revenue\n     , sum(ROUND(network.contentOwnerRevenue * ack.fireEventRevenueRatio, 5)) as content_owner_fee\n     , sum(ROUND(network.distributorRevenue * ack.fireEventRevenueRatio, 5))  as distributor_fee\n     , \"<%process_batch_id%>\"                                                 as process_batch_id\n     , date_trunc('HOUR', cast(ack.ackTimestamp as timestamp))                as event_date\nfrom AdvertisementContext\n  LATERAL VIEW explode(networkChain) T as network\n  LATERAL VIEW explode(acks) T as ack\nwhere network.role in ('CRO'\n    , 'R'\n    , 'D')\n    and (!ack.isPrivateImpression or network.networkIsAdOwner or network.networkIsExtraItemOwner)\ngroup by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 24, 25;"

	//str := "CREATE TABLE IF NOT EXISTS realtime.f_order_sa_troubleshoot_hourly_local  (\n\t`network_id` Int64 DEFAULT -1,\n\t`inbound_order_id` Int64 DEFAULT -1,\n\t`outbound_order_id` Int64 DEFAULT -1,\n\t`standard_brand_id` Int64 DEFAULT -1,\n\t`standard_brand_visibility` LowCardinality(String) DEFAULT 'FULL_VISIBILITY',\n\t`standard_device_type_id` Int64 DEFAULT -1,\n\t`standard_device_visibility` LowCardinality(String) DEFAULT 'FULL_VISIBILITY',\n\t`standard_programmer_id` Int64 DEFAULT -1,\n\t`standard_programmer_visibility` LowCardinality(String) DEFAULT 'FULL_VISIBILITY',\n\t`user_dma_code` Int64 DEFAULT -1,\n\t`geo_dma_visibility` LowCardinality(String) DEFAULT 'FULL_VISIBILITY',\n\t`standard_endpoint_owner_id` Int64 DEFAULT -1,\n\t`standard_endpoint_owner_visibility` LowCardinality(String) DEFAULT 'FULL_VISIBILITY',\n\t`standard_endpoint_id` Int64 DEFAULT -1,\n\t`standard_endpoint_visibility` LowCardinality(String) DEFAULT 'FULL_VISIBILITY',\n\t`order_error_id` Int64 DEFAULT -1,\n\t`ad_error_category_id` Int64 DEFAULT -1,\n\t`ad_error_id` Int64 DEFAULT -1,\n\t`user_agent_visibility` LowCardinality(String) DEFAULT 'FULL_VISIBILITY',\n\t`candidate_orders` Int64 DEFAULT 0,\n\t`selected_orders` Int64 DEFAULT 0,\n\t`filtered_orders` Int64 DEFAULT 0,\n\t`opportunity` Int64 DEFAULT 0,\n\t`candidated_ads` Int64 DEFAULT 0,\n\t`selected_primary_ads` Int64 DEFAULT 0,\n\t`distinct_selected_primary_ads` Int64 DEFAULT 0,\n\t`filtered_ads` Int64 DEFAULT 0,\n\t`error_category_ads` Int64 DEFAULT 0,\n\t`error_ads` Int64 DEFAULT 0,\n    `event_date` DateTime\n)\nENGINE = SummingMergeTree\nPARTITION BY toStartOfHour(event_date)\nPRIMARY KEY (network_id, event_date, inb;"
	//str := "CREATE TABLE defaultt.d_country  (     `id` Int64,     `name` Nullable(String),    `description` Nullable(String)  ) ENGINE = MergeTree() ORDER BY tuple() SETTINGS index_granularity = 8192;"

	//str := "select\n    if(auction is null, coalesce(candidate.network_id, cast(-1 as long)), coalesce(auction.network_id, cast(-1 as long)))   as network_id\n    , if(auction is null, coalesce(candidate.asset_id, cast(-1 as long)), coalesce(auction.asset_id, cast(-1 as long)))     as asset_id\n    , if(auction is null, coalesce(candidate.series_id, cast(-1 as long)), coalesce(auction.series_id, cast(-1 as long)))   as series_id\n    , if(auction is null, coalesce(candidate.site_id, cast(-1 as long)), coalesce(auction.site_id, cast(-1 as long)))       as site_id\n    , if(auction is null,\n        coalesce(candidate.site_section_id, cast(-1 as long)),\n        coalesce(auction.site_section_id, cast(-1 as long)))                                                                as site_section_id\n    , coalesce(cast(visitor.country_id as long), cast(-1 as long))                                                          as country_id\n    , coalesce(auction.time_position_class, 'Unknown')                                                                      as time_position_class\n    , coalesce(auction.device_type, 'Unknown')                                                                              as device_type\n    , coalesce(candidate.dsp_id, cast(-1 as long))                                                                          as dsp_id\n    , coalesce(candidate.internal_deal_id, cast(-1 as long))                                                                as deal_id\n    , coalesce(candidate.buyer_id, cast(-1 as long))                                                                        as buyer_id\n    , coalesce(candidate.buyer_group_id, cast(-1 as long))                                                                  as buyer_group_id\n    , coalesce(candidate.integration_type, '')                                                                              as integration_type\n    , coalesce(candidate.error, '')                                                                                         as error_code\n    , cast(array() as array<long>)                                                                                          as asset_group_ids\n    , cast(array() as array<long>)                                                                                          as site_section_group_ids\n    , sum(cast(1 as long))                                                                                                  as error_frequency\n    , sum(if((coalesce(candidate.bid_status, 0) & 1) > 0, cast(1 as long), cast(0 as long)))                                as received_bid\n    , sum(if((coalesce(candidate.bid_status, 0) & 2) > 0, cast(1 as long), cast(0 as long)))                                as resolved_bid\n    , sum(if((coalesce(candidate.bid_status, 0) & 8) > 0 and advertisement.is_fallback = false,\n              cast(1 as long), cast(0 as long)))                                                                            as selected_primary_bid\n    , sum(if((coalesce(candidate.bid_status, 0) & 8) > 0 and advertisement.is_fallback = true,\n              cast(1 as long), cast(0 as long)))                                                                            as selected_fallback_bid\n    , cast(0 as long)                                                                                                       as selected_bid_in_watched_slot_primary\n    , cast(0 as long)                                                                                                       as selected_bid_in_watched_slot_fallback\n    , sum(if((coalesce(candidate.bid_status, 0) & 1) > 0,\n        coalesce(candidate.raw_price, cast(0 as double)) * candidate.candidate_network_to_auction_network_exchange_rate,\n        cast(0 as double)))                                                                                                 as total_received_bid_price\n    , sum(if((coalesce(candidate.bid_status, 0) & 2) > 0,\n        coalesce(candidate.raw_price, cast(0 as double)) * candidate.candidate_network_to_auction_network_exchange_rate,\n        cast(0 as double)))                                                                                                 as total_resolved_bid_price\n    , sum(if((coalesce(candidate.bid_status, 0) & 8) > 0,\n        coalesce(candidate.clearing_price, cast(0 as double)) * candidate.candidate_network_to_auction_network_exchange_rate,\n        cast(0 as double)))                                                                                                 as total_bid_won_price\n    , \"<%process_batch_id%>\"                                                                                                as process_batch_id\n    , sum(if((coalesce(candidate.bid_status, 0) & 1) > 0, coalesce(candidate.original_price, cast(0 as double)) \n        * if(auction is not null, auction.bid_to_usd_exchange_rate, cast(0 as double)), cast(0 as double)))                 as demand_total_received_bid_price\n    , sum(if((coalesce(candidate.bid_status, 0) & 2) > 0, coalesce(candidate.original_price, cast(0 as double)) \n        * if(auction is not null, auction.bid_to_usd_exchange_rate, cast(0 as double)), cast(0 as double)))                 as demand_total_resolved_bid_price\n    , sum(if((coalesce(candidate.bid_status, 0) & 8) > 0, coalesce(candidate.dsp_clearing_price, cast(0 as double)) \n        * if(auction is not null, auction.bid_to_usd_exchange_rate, cast(0 as double)), cast(0 as double)))                                                                                                 as demand_total_bid_won_price\n    , coalesce(candidate.dsp_currency_id, cast(-1 as long))                                                                 as dsp_currency_id\n    , coalesce(candidate.buyer_platform_id, cast(-1 as long))                                                               as buyer_platform_id\n    , coalesce(candidate.internal_seat_id, cast(-1 as long))                                                                as seat_id\n    , coalesce(candidate.market_ad_id, cast(-1 as long))                                                                    as market_ad_id\n    , coalesce(candidate.advertiser_id, cast(-1 as long))                                                                   as advertiser_id\n    , coalesce(candidate.brand_id, cast(-1 as long))                                                                        as brand_id\n    , coalesce(candidate.bit_flags, cast(0 as long)) + coalesce(request.bit_flags, cast(0 as long))                         as bit_flag\n    , coalesce(candidate.bidding_buyer_id, cast(-1 as long))                                                                as bidding_buyer_id\n    , coalesce(candidate.trading_desk_id, cast(-1 as long))                                                                 as trading_desk_id\n    , cast(0 as long)                                                                                                       as pg_pre_filtered\n    , sum(if((coalesce(candidate.flags, 0) & 32768) > 0, cast(1 as long), cast(0 as long)))                                 as bid_pre_filtered\n    , date_trunc('HOUR', cast(request.timestamp as timestamp))                                                              as event_date\nfrom candidate\nwhere coalesce(candidate.integration_type, '') in ('OPENRTB_NORMAL', 'OPENRTB_PG_TD')\n    and if(auction is not null, auction.is_exchange_auction, false) = false -- filter MKPL Exchange Tx\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,27,31,32,33,34,35,36,37,38,39,42\n​\nunion all\n​\n-- selected_bid_in_watched_slot\nselect\n    if(ad.auction is null, coalesce(ad.candidate.network_id, cast(-1 as long)),\n        coalesce(ad.auction.network_id, cast(-1 as long)))                                                                  as network_id\n    , if(ad.auction is null, coalesce(ad.candidate.asset_id, cast(-1 as long)),\n        coalesce(ad.auction.asset_id, cast(-1 as long)))                                                                    as asset_id\n    , if(ad.auction is null, coalesce(ad.candidate.series_id, cast(-1 as long)),\n        coalesce(ad.auction.series_id, cast(-1 as long)))                                                                   as series_id\n    , if(ad.auction is null, coalesce(ad.candidate.site_id, cast(-1 as long)),\n        coalesce(ad.auction.site_id, cast(-1 as long)))                                                                     as site_id\n    , if(ad.auction is null, coalesce(ad.candidate.site_section_id, cast(-1 as long)),\n        coalesce(ad.auction.site_section_id, cast(-1 as long)))                                                             as site_section_id\n    , coalesce(cast(visitor.country_id as long), cast(-1 as long))                                                          as country_id\n    , coalesce(ad.auction.time_position_class, 'Unknown')                                                                   as time_position_class\n    , coalesce(ad.auction.device_type, 'Unknown')                                                                           as device_type\n    , coalesce(ad.candidate.dsp_id, cast(-1 as long))                                                                       as dsp_id\n    , coalesce(ad.candidate.internal_deal_id, cast(-1 as long))                                                             as deal_id\n    , coalesce(ad.candidate.buyer_id, cast(-1 as long))                                                                     as buyer_id\n    , coalesce(ad.candidate.buyer_group_id, cast(-1 as long))                                                               as buyer_group_id\n    , coalesce(ad.candidate.integration_type, '')                                                                           as integration_type\n    , ''                                                                                                                    as error_code\n    , cast(array() as array<long>)                                                                                          as asset_group_ids\n    , cast(array() as array<long>)                                                                                          as site_section_group_id\n    , cast(0 as long)                                                                                                       as error_frequency\n    , cast(0 as long)                                                                                                       as received_bid\n    , cast(0 as long)                                                                                                       as resolved_bid\n    , cast(0 as long)                                                                                                       as selected_primary_bid\n    , cast(0 as long)                                                                                                       as selected_fallback_bid\n    , sum(if(ad.advertisement.is_fallback = false, cast(1 as long), cast(0 as long)))                                       as selected_bid_in_watched_slot_primary\n    , sum(if(ad.advertisement.is_fallback = true, cast(1 as long), cast(0 as long)))                                        as selected_bid_in_watched_slot_fallback\n    , cast(0 as double)                                                                                                     as total_received_bid_price\n    , cast(0 as double)                                                                                                     as total_resolved_bid_price\n    , cast(0 as double)                                                                                                     as total_bid_won_price\n    , \"<%process_batch_id%>\"                                                                                                as process_batch_id\n    , cast(0 as double)                                                                                                     as demand_total_received_bid_price\n    , cast(0 as double)                                                                                                     as demand_total_resolved_bid_price\n    , cast(0 as double)                                                                                                     as demand_total_bid_won_price\n    , coalesce(ad.candidate.dsp_currency_id, cast(-1 as long))                                                              as dsp_currency_id\n    , coalesce(ad.candidate.buyer_platform_id, cast(-1 as long))                                                            as buyer_platform_id\n    , coalesce(ad.candidate.internal_seat_id, cast(-1 as long))                                                             as internal_seat_id\n    , coalesce(ad.candidate.market_ad_id, cast(-1 as long))                                                                 as market_ad_id\n    , coalesce(ad.candidate.advertiser_id, cast(-1 as long))                                                                as advertiser_id\n    , coalesce(ad.candidate.brand_id, cast(-1 as long))                                                                     as brand_id\n    , coalesce(ad.candidate.bit_flags, cast(0 as long)) + coalesce(request.bit_flags, cast(0 as long))                      as bit_flag\n    , coalesce(ad.candidate.bidding_buyer_id, cast(-1 as long))                                                             as bidding_buyer_id\n    , coalesce(ad.candidate.trading_desk_id, cast(-1 as long))                                                              as trading_desk_id\n    , cast(0 as long)                                                                                                       as pg_pre_filtered\n    , cast(0 as long)                                                                                                       as bid_pre_filtered\n    , date_trunc('HOUR', cast(ack.timestamp as timestamp))                                                                  as event_date\nfrom ack\n    lateral view explode(ads_in_slot) as ad\nwhere ack.ack_entity_type = 'slot'\n    and coalesce(ack.metrics.slot_impression, cast(0 as long)) > 0\n    and ad.candidate is not null -- for better performance\n    and (coalesce(ad.candidate.bid_status, cast(0 as long)) & 8) > 0\n    and coalesce(ad.candidate.integration_type, '') in ('OPENRTB_NORMAL', 'OPENRTB_PG_TD')\n    and if(ad.auction is not null, ad.auction.is_exchange_auction, false) = false -- filter out MKPL Exchange Tx\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,27,31,32,33,34,35,36,37,38,39,42"
	//str := "select\n    if(ad.auction is null, coalesce(ad.candidate.network_id, cast(-1 as long)),\n        coalesce(ad.auction.network_id, cast(-1 as long)))                                                                  as network_id\n    , if(ad.auction is null, coalesce(ad.candidate.asset_id, cast(-1 as long)),\n        coalesce(ad.auction.asset_id, cast(-1 as long)))                                                                    as asset_id\n    , if(ad.auction is null, coalesce(ad.candidate.series_id, cast(-1 as long)),\n        coalesce(ad.auction.series_id, cast(-1 as long)))                                                                   as series_id\n    , if(ad.auction is null, coalesce(ad.candidate.site_id, cast(-1 as long)),\n        coalesce(ad.auction.site_id, cast(-1 as long)))                                                                     as site_id\n    , if(ad.auction is null, coalesce(ad.candidate.site_section_id, cast(-1 as long)),\n        coalesce(ad.auction.site_section_id, cast(-1 as long)))                                                             as site_section_id\n    , coalesce(cast(visitor.country_id as long), cast(-1 as long))                                                          as country_id\n    , coalesce(ad.auction.time_position_class, 'Unknown')                                                                   as time_position_class\n    , coalesce(ad.auction.device_type, 'Unknown')                                                                           as device_type\n    , coalesce(ad.candidate.dsp_id, cast(-1 as long))                                                                       as dsp_id\n    , coalesce(ad.candidate.internal_deal_id, cast(-1 as long))                                                             as deal_id\n    , coalesce(ad.candidate.buyer_id, cast(-1 as long))                                                                     as buyer_id\n    , coalesce(ad.candidate.buyer_group_id, cast(-1 as long))                                                               as buyer_group_id\n    , coalesce(ad.candidate.integration_type, '')                                                                           as integration_type\n    , ''                                                                                                                    as error_code\n    , cast(array() as array<long>)                                                                                          as asset_group_ids\n    , cast(array() as array<long>)                                                                                          as site_section_group_id\n    , cast(0 as long)                                                                                                       as error_frequency\n    , cast(0 as long)                                                                                                       as received_bid\n    , cast(0 as long)                                                                                                       as resolved_bid\n    , cast(0 as long)                                                                                                       as selected_primary_bid\n    , cast(0 as long)                                                                                                       as selected_fallback_bid\n    , sum(if(ad.advertisement.is_fallback = false, cast(1 as long), cast(0 as long)))                                       as selected_bid_in_watched_slot_primary\n    , sum(if(ad.advertisement.is_fallback = true, cast(1 as long), cast(0 as long)))                                        as selected_bid_in_watched_slot_fallback\n    , cast(0 as double)                                                                                                     as total_received_bid_price\n    , cast(0 as double)                                                                                                     as total_resolved_bid_price\n    , cast(0 as double)                                                                                                     as total_bid_won_price\n    , \"<%process_batch_id%>\"                                                                                                as process_batch_id\n    , cast(0 as double)                                                                                                     as demand_total_received_bid_price\n    , cast(0 as double)                                                                                                     as demand_total_resolved_bid_price\n    , cast(0 as double)                                                                                                     as demand_total_bid_won_price\n    , coalesce(ad.candidate.dsp_currency_id, cast(-1 as long))                                                              as dsp_currency_id\n    , coalesce(ad.candidate.buyer_platform_id, cast(-1 as long))                                                            as buyer_platform_id\n    , coalesce(ad.candidate.internal_seat_id, cast(-1 as long))                                                             as internal_seat_id\n    , coalesce(ad.candidate.market_ad_id, cast(-1 as long))                                                                 as market_ad_id\n    , coalesce(ad.candidate.advertiser_id, cast(-1 as long))                                                                as advertiser_id\n    , coalesce(ad.candidate.brand_id, cast(-1 as long))                                                                     as brand_id\n    , coalesce(ad.candidate.bit_flags, cast(0 as long)) + coalesce(request.bit_flags, cast(0 as long))                      as bit_flag\n    , coalesce(ad.candidate.bidding_buyer_id, cast(-1 as long))                                                             as bidding_buyer_id\n    , coalesce(ad.candidate.trading_desk_id, cast(-1 as long))                                                              as trading_desk_id\n    , cast(0 as long)                                                                                                       as pg_pre_filtered\n    , cast(0 as long)                                                                                                       as bid_pre_filtered\n    , date_trunc('HOUR', cast(ack.timestamp as timestamp))                                                                  as event_date\nfrom ack\n    lateral view explode(ads_in_slot) as ad\nwhere ack.ack_entity_type = 'slot'\n    and coalesce(ack.metrics.slot_impression, cast(0 as long)) > 0\n    and ad.candidate is not null -- for better performance\n    and (coalesce(ad.candidate.bid_status, cast(0 as long)) & 8) > 0\n    and coalesce(ad.candidate.integration_type, '') in ('OPENRTB_NORMAL', 'OPENRTB_PG_TD')\n    and if(ad.auction is not null, ad.auction.is_exchange_auction, false) = false -- filter out MKPL Exchange Tx\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,27,31,32,33,34,35,36,37,38,39,42"

	// Setup the input
	input := antlr.NewInputStream(str)



	// Create the Lexer
	lexer := clickhouse_parser.NewClickHouseLexer(input)
	stream := antlr.NewCommonTokenStream(lexer,0)

	// Create the Parser
	p := clickhouse_parser.NewClickHouseParser(stream)

	p.BuildParseTrees = true

	tree := p.QueryStmt()
	//tree := p.Query()
	//tree := p.CreateStmt()

	// Finally parse the expression
	listener := NewTreeShapeListener()

	antlr.ParseTreeWalkerDefault.Walk(listener,tree)




	fmt.Println(listener.tableName)

	for k,v := range listener.columns{
		fmt.Println(k,":",v)
	}
	fmt.Println(len(listener.columns))
}

type TreeShapeListener struct {
	*clickhouse_parser.BaseClickHouseParserListener
	tableName string
	columns map[string]string
	columnsCount int
}

func NewTreeShapeListener() *TreeShapeListener {
	obj := new(TreeShapeListener)
	obj.columns = make(map[string]string)
	return obj
}

func (this *TreeShapeListener) EnterTableIdentifier(ctx *clickhouse_parser.TableIdentifierContext) {
	this.tableName = ctx.GetText()
}

// select as
func (this *TreeShapeListener) EnterColumnExprAlias(ctx *clickhouse_parser.ColumnExprAliasContext) {
	this.columns[ctx.GetChild(0).(antlr.ParseTree).GetText()] = ctx.GetChild(ctx.GetChildCount()-1).(antlr.ParseTree).GetText()
}

// create table to get  columns
func (this *TreeShapeListener) EnterTableElementExprColumn(ctx *clickhouse_parser.TableElementExprColumnContext) {
	count := ctx.GetChildCount()
	for i := 0;i<count;i++{
		this.columns[ctx.GetChild(i).GetChild(0).(antlr.ParseTree).GetText()] = ctx.GetChild(i).GetChild(1).(antlr.ParseTree).GetText()
	}
	this.columnsCount = count
}

func (this *TreeShapeListener) EnterColumnsClause(ctx *clickhouse_parser.ColumnsClauseContext) {
	for i,count := 1,ctx.GetChildCount();i < count;i+=2{
		this.columns[ctx.GetChild(i).(antlr.ParseTree).GetText()] = ""
	}
}
